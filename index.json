[{"content":"Some tips and tricks for the CP-SAT solver.\nResources: https://github.com/or-tools/awesome_or-tools https://github.com/d-krupke/cpsat-primer https://stackoverflow.com/questions/tagged/or-tools https://or.stackexchange.com/questions/tagged/or-tools https://groups.google.com/g/or-tools-discuss https://github.com/google/or-tools/discussions https://discord.gg/ENkQrdf Solver Parameters By default, OR-tools will try to use all available cores but you can set num_search_workers manually.\nsolver.parameters.num_search_workers = 8 If the program silently crashes you can enable logging to get more info.\nsolver.parameters.log_search_progress = True You can also see which worker is better for your problem and improve the single core performance by setting the same parameters.\nSearch for all optimal solutions You can\u0026rsquo;t enumerate all solutions if you have an objective, so you have to do it in two steps:\n# Get the optimal objective value model.Maximize(objective) solver.Solve(model) # Set the objective to a fixed value # use round() instead of int() model.Add(objective == round(solver.ObjectiveValue())) model.Proto().ClearField(\u0026#39;objective\u0026#39;) # Search for all solutions solver.parameters.enumerate_all_solutions = True solver.Solve(model, cp_model.VarArraySolutionPrinter([x, y, z])) Non-contiguous Intvar Alternatives to model.NewIntVar(lb, ub, name), solving might be faster:\n# List of values model.NewIntVarFromDomain( cp_model.Domain.FromValues([1, 3, 4, 6]), \u0026#39;x\u0026#39; ) # List of intervals model.NewIntVarFromDomain( cp_model.Domain.FromIntervals([[1, 2], [4, 6]]), \u0026#39;x\u0026#39; ) # Exclude [-1, 1] model.NewIntVarFromDomain( cp_model.Domain.FromIntervals([[cp_model.INT_MIN, -2], [2, cp_model.INT_MAX]]), \u0026#39;x\u0026#39; ) # Constant model.NewConstant(154) Domains Working with Domains gives a lot of flexibility and should be faster than creating multiple constraints.\ndomain = cp_model.Domain(0, 10) domain = cp_model.Domain.FromValues([1, 3, 4, 6]) domain = cp_model.Domain.FromIntervals([[1, 2], [4, 6]]) domain = cp_model.Domain.FromIntervals([ [cp_model.INT_MIN, -2], [2, cp_model.INT_MAX] ]) model.AddLinearExpressionInDomain(sum(my_vars), domain).OnlyEnforceIf(b) Iff, equivalence, boolean product p \u0026lt;=\u0026gt; (x and y)\n# (x and y) =\u0026gt; p, rewrite as not(x and y) or p model.AddBoolOr([x.Not(), y.Not(), p]) # p =\u0026gt; (x and y) model.AddImplication(p, x) model.AddImplication(p, y) Boolean sum, boolean or p \u0026lt;=\u0026gt; (x or y)\n# p =\u0026gt; (x or y), rewrite as not(p) or x or y model.AddBoolOr([x, y, p.Not()]) # (x or y) =\u0026gt; p model.AddImplication(x, p) model.AddImplication(y, p) Note: see De Morgan\u0026rsquo;s laws\nBoolean Implications # a =\u0026gt; b (both booleans) model.AddImplication(a, b) # a \u0026lt;=\u0026gt; b (use only one of them if you can) model.Add(a == b) # a and b and c =\u0026gt; d model.Add(d == 1).OnlyEnforceIf([a, b, c]) or model.AddBoolOr([a.Not(), b.Not(), c.Not(), d]) If-Then-Else Using intermediate boolean variables.\nb = model.NewBoolVar(\u0026#39;b\u0026#39;) # Implement b == (x \u0026gt;= 5). model.Add(x \u0026gt;= 5).OnlyEnforceIf(b) model.Add(x \u0026lt; 5).OnlyEnforceIf(b.Not()) Solution hint / Warm start It may speed up the search.\nnum_vals = 3 x = model.NewIntVar(0, num_vals - 1, \u0026#39;x\u0026#39;) y = model.NewIntVar(0, num_vals - 1, \u0026#39;y\u0026#39;) z = model.NewIntVar(0, num_vals - 1, \u0026#39;z\u0026#39;) model.Add(x != y) model.Maximize(x + 2 * y + 3 * z) # Solution hinting: x \u0026lt;- 1, y \u0026lt;- 2 model.AddHint(x, 1) model.AddHint(y, 2) Storing Multi-index variables I recommend using dictionary comprehensions:\nemployee_works_day = { (e, day): model.NewBoolVar(f\u0026#34;{e} works {day}\u0026#34;) for e in employees for day in days } Variable product (Non linear) You have to create an intermediate variable:\nx = model.NewIntvar(0, 8, \u0026#39;x\u0026#39;) y = model.NewIntvar(0, 5, \u0026#39;y\u0026#39;) xy = model.NewIntVar(0, 8*5, \u0026#39;xy\u0026#39;) model.AddMultiplicationEquality(xy, [x, y]) Black box function (Non linear) As your last resort you can precalculate all the posible values and use an element constraint.\nfrom ortools.sat.python import cp_model model = cp_model.CpModel() x = model.NewIntVar(0, 10, \u0026#34;\u0026#34;) two_to_the_x = model.NewIntVar(1, 2 ** 10, \u0026#34;\u0026#34;) precalculated = [2 ** i for i in range(11)] model.AddElement(x, precalculated, two_to_the_x) # test model.Add(x == 3) solver = cp_model.CpSolver() solver.Solve(model) print(\u0026#34;x\u0026#34;, solver.Value(x)) print(\u0026#34;2**x\u0026#34;, solver.Value(two_to_the_x)) Load model Proto This allows you to use different machines.\nfrom google.protobuf import text_format from ortools.sat.python import cp_model model = cp_model.CpModel() a = model.NewIntVar(0, 10, \u0026#34;a\u0026#34;) b = model.NewIntVar(0, 10, \u0026#34;b\u0026#34;) model.Maximize(a + b) new_model = cp_model.CpModel() text_format.Parse(str(model), new_model.Proto()) solver = cp_model.CpSolver() status = solver.Solve(new_model) print(solver.StatusName(status)) print(solver.ObjectiveValue()) Circuit constraint (ordering) Ordering the numbers from 1 to 10 so that we maximize the distance between between numbers:\nfrom itertools import permutations from ortools.sat.python import cp_model model = cp_model.CpModel() solver = cp_model.CpSolver() literals = {} # An arc is just a (int, int, BoolVar) tuple all_arcs = [] nodes = range(1, 11) for i in nodes: # We use 0 as a dummy nodes as we don\u0026#39;t have an actual circuit literals[0, i] = model.NewBoolVar(f\u0026#34;0 -\u0026gt; {i}\u0026#34;) # start arc literals[i, 0] = model.NewBoolVar(f\u0026#34;{i} -\u0026gt; 0\u0026#34;) # end arc all_arcs.append([0, i, literals[0, i]]) all_arcs.append([i, 0, literals[i, 0]]) for i, j in permutations(nodes, 2): # this booleans will be true if the arc is present literals[i, j] = model.NewBoolVar(f\u0026#34;{i} -\u0026gt; {j}\u0026#34;) all_arcs.append([i, j, literals[i, j]]) # to make an arc optional, add the [i, i, True] loop model.AddCircuit(all_arcs) model.Maximize(sum(literals[i, j] * abs(i - j) for i, j in permutations(nodes, 2))) solver.Solve(model) node = 0 print(node, end=\u0026#34;\u0026#34;) while True: for i in nodes: if i != node and solver.Value(literals[node, i]): print(f\u0026#34; -\u0026gt; {i}\u0026#34;, end=\u0026#34;\u0026#34;) node = i break else: break print(\u0026#34; -\u0026gt; 0\u0026#34;) Fairness, distribute items evenly Maximize the minimum value model = cp_model.CpModel() n_tasks = 100 n_employees = 3 min_tasks = model.NewIntVar(0, n_tasks, \u0026#34;\u0026#34;) employee_tasks = [model.NewIntVar(0, n_tasks, \u0026#34;\u0026#34;) for _ in range(n_employees)] model.Add(sum(employee_tasks) == n_tasks) model.AddMinEquality(min_tasks, employee_tasks) model.Maximize(min_tasks) solver = cp_model.CpSolver() status = solver.Solve(model) print([solver.Value(n) for n in employee_tasks]) Minimize delta to the average value model = cp_model.CpModel() n_tasks = 100 n_employees = 3 avg = n_tasks // n_employees delta = model.NewIntVar(0, n_tasks, \u0026#34;\u0026#34;) employee_tasks = [model.NewIntVar(0, n_tasks, \u0026#34;\u0026#34;) for _ in range(n_employees)] model.Add(sum(employee_tasks) == n_tasks) for i in range(n_employees): model.Add(employee_tasks[i] \u0026lt;= avg + delta) model.Add(employee_tasks[i] \u0026gt;= avg - delta) model.Minimize(delta) solver = cp_model.CpSolver() status = solver.Solve(model) print([solver.Value(n) for n in employee_tasks]) Multiobjective optimization Two ways to achieve that:\nAdd a weight to each objective Solve with the first objective, constraint the objective with the solution, hint and solve with the new objective. from ortools.sat.python import cp_model model = cp_model.CpModel() solver = cp_model.CpSolver() x = model.NewIntVar(0, 10, \u0026#34;x\u0026#34;) y = model.NewIntVar(0, 10, \u0026#34;y\u0026#34;) # Maximize x model.Maximize(x) solver.Solve(model) print(\u0026#34;x\u0026#34;, solver.Value(x)) print(\u0026#34;y\u0026#34;, solver.Value(y)) print() # Hint (speed up solving) model.AddHint(x, solver.Value(x)) model.AddHint(y, solver.Value(y)) # Maximize y (and constraint prev objective) model.Add(x == round(solver.ObjectiveValue())) # use \u0026lt;= or \u0026gt;= if not optimal model.Maximize(y) solver.Solve(model) print(\u0026#34;x\u0026#34;, solver.Value(x)) print(\u0026#34;y\u0026#34;, solver.Value(y)) Soft constraints https://stackoverflow.com/a/66377562\nEarly stopping Stop if objective does not improve.\nfrom threading import Timer from ortools.sat.python import cp_model class ObjectiveEarlyStopping(cp_model.CpSolverSolutionCallback): def __init__(self, timer_limit: int): super(ObjectiveEarlyStopping, self).__init__() self._timer_limit = timer_limit self._timer = None self._reset_timer() # Remove to guarantee a solution def on_solution_callback(self): self._reset_timer() def _reset_timer(self): if self._timer: self._timer.cancel() self._timer = Timer(self._timer_limit, self.StopSearch) self._timer.start() def StopSearch(self): print(f\u0026#34;{self._timer_limit} seconds without improvement\u0026#34;) super().StopSearch() ","permalink":"https://xiang.es/posts/cp-sat/","summary":"\u003cp\u003eSome tips and tricks for the CP-SAT solver.\u003c/p\u003e","title":"✨ Recipes for Google OR-Tools"},{"content":"List of tools I use daily\nCoding IDE: PyCharm / VS Code Autocompletion: Copilot / Tabnine Formatters: black / prettier Questions: Stack Overflow / Reddit Code search: Sourcegraph / Github Libraries list: Awesome / Awesome-python / Bundlephobia VCS Hosting: Github / Gitlab / Bitbucket / Devops Conventions: Gitmoji / Conventional Comments / Conventional Commits pre-commit Communication Chat: Slack / Teams / Google Chat / Discord Tickets: Trello / Jira Documentation: Confluence Code sharing: Pastebin / carbon API Tunneling: ngrok HTTP Client: Postman / Insomnia / httpie Spec: Stoplight studio / Swagger / Async API JSON: jq / JWT Other: Cloudflare DB SQL: DBeaver NoSQL: MongoDB Compass / NoSQLBooster / Robomongo Devops CI/CD: Jenkins / GitHub Actions Static Analysis: SonarQube Docker: Docker Desktop / Docker Compose / Lens Other Diagrams: Excalidraw / draw.io / jsonvisio / sequencediagram Images: Unsplash / Pexels / FreePik Office: Google docs PDF, image editing: tinywow Data generator: DNI generator / RandomKeyGen PassWords: KeePass / KeePassXC Browsers: Chrome / Firefox Developer Edition Browser Plugins: Awesome Screen / Json viewer Music: Spotify / Lofi Girl ","permalink":"https://xiang.es/posts/tooling/","summary":"\u003cp\u003eList of tools I use daily\u003c/p\u003e","title":"🔨 My Development Tools"},{"content":"Quick look at the repo for arq by Samuel Colvin.\nLinks: https://github.com/samuelcolvin/arq/ https://pypi.org/project/arq/ Codemap .github/: mainly GitHub Actions arq/: source code docs/: sphinx documentation requirements/: requirements.in and txt, using pip-tools, for local dev tests/: pytest, one test file per public module .codecov.yml: codecov config .gitignore .pre-commit-config.yaml: pre-commit + make lint + mypy HISTORY.rst: changelog LICENSE: MIT Makefile: install, format, lint (flake8, isort, black), test, all, docs, etc README.md: simple readme for github and pypi pyproject.toml: hatchling, PEP 621, config for pytest, coverage, black, isort, mypy Dependencies Direct redis[hiredis]: redis interface with faster parser click: Command Line Interface Creation Kit, from the pallets team typing-extensions: backport of new typing features for older python versions docs.in Sphinx: documentation generator for multiple languages linting.in black: code formatter flake8: linter flake8-quotes isort[colors]: import sorter with colorama mypy: static type checker types-pytz: typeshed stubs for pytz types-redis: typeshed stubs for redis testing.in coverage[toml] dirty-equals msgpack pydantic pytest pytest-asyncio pytest-mock pytest-sugar pytest-timeout pytz redislite Code examples Use __all__ in __init__.py to control what is exported __all__ = ( \u0026#39;ArqRedis\u0026#39;, \u0026#39;create_pool\u0026#39;, \u0026#39;cron\u0026#39;, \u0026#39;VERSION\u0026#39;, \u0026#39;Retry\u0026#39;, \u0026#39;Worker\u0026#39;, \u0026#39;check_health\u0026#39;, \u0026#39;func\u0026#39;, \u0026#39;run_worker\u0026#39;, ) __main__.py file to run the module as a script, e.g. arq --help: from .cli import cli if __name__ == \u0026#39;__main__\u0026#39;: cli() from typing import TYPE_CHECKING to avoid circular imports: if TYPE_CHECKING: from .typing import WorkerSettingsType py.typed file to indicate that the package is fully typed, for tools like mypy sphinx markup in docstrings, type only with type hints async def abort(self, *, timeout: Optional[float] = None, poll_delay: float = 0.5) -\u0026gt; bool: \u0026#34;\u0026#34;\u0026#34; Abort the job. :param timeout: maximum time to wait for the job result before raising ``TimeoutError``, will wait forever on None :param poll_delay: how often to poll redis for the job result :return: True if the job aborted properly, False otherwise \u0026#34;\u0026#34;\u0026#34; Use sys.version_info to check for python version if sys.version_info \u0026gt;= (3, 8): from typing import Literal, Protocol else: from typing_extensions import Literal, Protocol typing.py file with type aliases and Protocol classes instead of Callable OptionType = Union[None, Set[int], int] WeekdayOptionType = Union[OptionType, Literal[\u0026#39;mon\u0026#39;, \u0026#39;tues\u0026#39;, \u0026#39;wed\u0026#39;, \u0026#39;thurs\u0026#39;, \u0026#39;fri\u0026#39;, \u0026#39;sat\u0026#39;, \u0026#39;sun\u0026#39;]] SecondsTimedelta = Union[int, float, timedelta] class WorkerCoroutine(Protocol): __qualname__: str async def __call__(self, ctx: Dict[Any, Any], *args: Any, **kwargs: Any) -\u0026gt; Any: # pragma: no cover pass Use cast to avoid typing errors redis_settings = cast(Optional[RedisSettings], cls_kwargs.get(\u0026#39;redis_settings\u0026#39;)) health_check_key = cast(Optional[str], cls_kwargs.get(\u0026#39;health_check_key\u0026#39;)) queue_name = cast(Optional[str], cls_kwargs.get(\u0026#39;queue_name\u0026#39;)) Keyword only arguments using * async def create_pool( settings_: RedisSettings = None, *, retry: int = 0, job_serializer: Optional[Serializer] = None, job_deserializer: Optional[Deserializer] = None, default_queue_name: str = default_queue_name, expires_extra_ms: int = expires_extra_ms, ) -\u0026gt; ArqRedis: ","permalink":"https://xiang.es/posts/arq/","summary":"\u003cp\u003eQuick look at the repo for \u003ca href=\"https://github.com/samuelcolvin/arq/\"\u003earq\u003c/a\u003e by Samuel Colvin.\u003c/p\u003e","title":"👨‍🎓 arq source analysis"},{"content":" Note\nUsar post-its con fechas en tuppers.\nDespensa:\nSal, Azucar, MSG, Avecrem, Pimienta negra y blanca, Paprika Aceite de sesamo, salsa de soja, vinagre Vino de arroz, vinagre de arroz, vino blanco Almidón de patata, maicena Comino en polvo, laurel, tomillo Sopas Sopa de maíz, pollo, huevo 📺 Freir jengibre picado, añadir agua y pechuga, unos 5 min Añadir maiz, 3 min, añadir pechuga deshilachada, sal, azucar, avecrem Almidon de patata con agua para espesar, añadir huevo poco a poco, torbellino Un poco de pimienta blanca, aceite de sesamo Sopa de huevo y tomate 📺 Tomate picado, freir en sarten un ratillo, sal y azucar Añadir agua (y caldo), quitar espuma Salsa de soja, aceite sesamo, sal y pimienta blanca Espesar con almidon/maicena, añadir huevo y Cebollino Sopa de patatas al ajillo 📺 Patatas peladas en rodajas finas, freirlas Mortero, dientes de ajo con ramas de perejil, vinagre de manzana y agua al terminar Sacar las patatas y meter en una olla después de estar doradas Añadir mezcla del mortero, sal y agua Llevar a ebullición, bajar al minimo y dejar 25 min Matamaridos 📺 Meter en cazuela media cebolla (tal cual), medio pimiento rojo 2 dientes de ajo, 2 tomate de bote, cascar 2 patatas, 2 zanahorias medianas Llenar de agua, sal, aceite, 20 min Cortar Lomos de merluzas en tamaño bocado Sacar cebolla, pimiento, tomates, ajos y triturar Hervir, añadir merluza, apagar el fuego, zumo de limon, perejil picado, tapar 5 min Borsch / sopa de remolacha 📺 ⏳ Picar cebolla, zanahoria en bastoncillos, tomate pelado picado, pimiento rojo en tiras Medio kilo remolacha en tiras finas Dorar cebolla, añadir zanahoria, rehogar, añadir remolacha, rehogar Añadir tomate, rehogar, añadir tomate concentrado, agua Fuego bajo, 50-60 min, por otro lado caldo de carne, con carne, repollo y patatas Añadir sofrito de verduras, picar ajo, perejil y eneldo añadir al final Rectificar con sal y pimienta, un poco de vinagre Crema de verduras 📺 Principales Golden Curry Dorar cebolla y carne (contramuslo pollo o ragut) Añadir patatas y zanahorias Añadir caldo o agua, dejar 20 min, quitar espuma Añadir curry (media tableta, cortada) 5 min Costillas con patatas 📺 Dorar costillas y retirar Ajos, cebolla, puerro picados al mismo aceite, sal y pimienta negra, 15 min f. suave Añadir patatas, cucharadilla de paprika, integrar brevemente Devolver costilla, medio vaso vino blanco, 1 min Cubrir caldo de carne, sal, cucharadita de comino en polvo y hoja de laurel, 20 min Pollo al ajillo 📺 Ajo sin pelar a fuego medio 2 min, salpimentar pollo y dorar Retirar pollo, dorar más ajo en láminas y ajo picado también Tostar harina, añadir medio vaso vino blanco, evaporar alcohol 1 min Devolver pollo y añadir caldo, 20 min Pollo coca cola 📺 Arroz con cerdo y setas 📺 Jiangbao tofu 📺 Merluza en salsa verde 📺 Salar merluza y dejar en nevera 20 min Patatas en rodaja de 0,5 cm Aceite y ajo picado, fuego suave, rehogar harina Añadir caldo de pescado, añadir patatas, guisantes y perejil, 10 min tapado Añadir merluza, más caldo, 3-4 min, vuelta, más caldo y perejil 3 min más, tapado, mojar merluza con salsa Pollo al horno 📺 ⏳ Patatas peladas en rodajas, cebolla en juliana, añadir sal y pimienta Muslos de pollo encima, mojar pollo con agua y chorro de aceite, salpimentar y tomillo Horno, 200ºC arriba y abajo, 20 min, dar la vuelta, y otros 20 min Pollo guisado 📺 ⏳ Dorar muslos de pollo 3 min, retirar Añadir cebolla picada, pimiento rojo y verde, ajo picado, sal 5 min fuego suave, tomate pelado en tacos, 5 min más 1 vaso de vino blanco, 3 min más fuego fuerte, añadir pollo Cubrir con caldo, hoja de laurel, 45 min fuego medio Guiso de ternera y patata 📺 ⏳ Salpimentar ternera, dorar, retirar Añadir cebolla picada, zanahoria tacos, ajo picado, sal y pimienta Fuego suave 10 min, vaso tomate triturado, tomillo, 10 min más Devolver ternera, integrar 1 min 1 vaso de vino tinto, 1 vaso de caldo, sal, pimienta 30 min, fuego suave, tapado, añadir patatas en cubos, 25 min más Chistorra a la sidra Atemperar chistorra Dorar chistorra en sarten 5 min Añadir sidra, 15 min Pollo en salsa de queso 📺 Gulas al ajillo Pollo Kung Pao 📺 Lasaña de calabaza 📺 Fideos con mantequilla de cacahuete 📺 Espaguetis con huevo 📺 Pasta carbonara 📺 Vegetariano Huevos con tomate 📺 Cortar tomate en rodajas, batir huevos con sal Saltear huevo, retirar, saltear tomate, ketchup, añadir agua, sal, azucar Espesar con agua con almidon, aceite de sesamo, devolver huevo Añadir cebollino Huevos revueltos 📺 Mantequilla o aceite a fuego muy suave, echar huevos sin batir Remover un poco, sal y pimienta, parar 10 seg, remover, parar, etc\u0026hellip; Retirar del fuego y añadir cebollino Broccoli con ajo 📺 sal, azulcar, maicena (corn starch), agua, msg escaldar broccoli 20 seg, pasar agua fria para parar coccion ajo picado, jengibre picado, freir 15 seg, meter brocoli y salsa, 15 seg Patatas fritas al horno 📺 hervir 8 min agua con sal y vinagre 15 min, vuelta, 15 min, 200ºC Lentejas 📺 Shakshuka 📺 Menemen 📺 Extra Congelar carne 📺 Cebolla rosa curada 📺 Cortar de polo a polo Añadir vinagre, medio sumergido Un poquito de sal, un par de cucharadillas de azucar 2 días en la nevera antes de consumir / 2 semanas máximo ","permalink":"https://xiang.es/recetas/","summary":"Note\nUsar post-its con fechas en tuppers.\nDespensa:\nSal, Azucar, MSG, Avecrem, Pimienta negra y blanca, Paprika Aceite de sesamo, salsa de soja, vinagre Vino de arroz, vinagre de arroz, vino blanco Almidón de patata, maicena Comino en polvo, laurel, tomillo Sopas Sopa de maíz, pollo, huevo 📺 Freir jengibre picado, añadir agua y pechuga, unos 5 min Añadir maiz, 3 min, añadir pechuga deshilachada, sal, azucar, avecrem Almidon de patata con agua para espesar, añadir huevo poco a poco, torbellino Un poco de pimienta blanca, aceite de sesamo Sopa de huevo y tomate 📺 Tomate picado, freir en sarten un ratillo, sal y azucar Añadir agua (y caldo), quitar espuma Salsa de soja, aceite sesamo, sal y pimienta blanca Espesar con almidon/maicena, añadir huevo y Cebollino Sopa de patatas al ajillo 📺 Patatas peladas en rodajas finas, freirlas Mortero, dientes de ajo con ramas de perejil, vinagre de manzana y agua al terminar Sacar las patatas y meter en una olla después de estar doradas Añadir mezcla del mortero, sal y agua Llevar a ebullición, bajar al minimo y dejar 25 min Matamaridos 📺 Meter en cazuela media cebolla (tal cual), medio pimiento rojo 2 dientes de ajo, 2 tomate de bote, cascar 2 patatas, 2 zanahorias medianas Llenar de agua, sal, aceite, 20 min Cortar Lomos de merluzas en tamaño bocado Sacar cebolla, pimiento, tomates, ajos y triturar Hervir, añadir merluza, apagar el fuego, zumo de limon, perejil picado, tapar 5 min Borsch / sopa de remolacha 📺 ⏳ Picar cebolla, zanahoria en bastoncillos, tomate pelado picado, pimiento rojo en tiras Medio kilo remolacha en tiras finas Dorar cebolla, añadir zanahoria, rehogar, añadir remolacha, rehogar Añadir tomate, rehogar, añadir tomate concentrado, agua Fuego bajo, 50-60 min, por otro lado caldo de carne, con carne, repollo y patatas Añadir sofrito de verduras, picar ajo, perejil y eneldo añadir al final Rectificar con sal y pimienta, un poco de vinagre Crema de verduras 📺 Principales Golden Curry Dorar cebolla y carne (contramuslo pollo o ragut) Añadir patatas y zanahorias Añadir caldo o agua, dejar 20 min, quitar espuma Añadir curry (media tableta, cortada) 5 min Costillas con patatas 📺 Dorar costillas y retirar Ajos, cebolla, puerro picados al mismo aceite, sal y pimienta negra, 15 min f.","title":"🍽️ Recetas"},{"content":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nBasics Web Frameworks ","permalink":"https://xiang.es/java/","summary":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nBasics Web Frameworks ","title":"☕ Java"},{"content":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nhttps://stateofjs.com/en-us/\nBasics Download NodeJS and Visual Studio Code.\n📝Handbook 📝TypeScript Deep Dive Web Frameworks Note\nSee notes about web\nExpress: Fastify: NestJS: ToolJet Novu Amplication Vendure ","permalink":"https://xiang.es/typescript/","summary":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nhttps://stateofjs.com/en-us/\nBasics Download NodeJS and Visual Studio Code.\n📝Handbook 📝TypeScript Deep Dive Web Frameworks Note\nSee notes about web\nExpress: Fastify: NestJS: ToolJet Novu Amplication Vendure ","title":"🇹 TypeScript / NodeJS"},{"content":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nBasics Download Python and Visual Studio Code with the Python extension.\nStart with single file scripts.\n📚Introducing Python (2019): Ignore everything after chapter 11 📝Basic OOP 🎨Skim through pep8 ⚡️Learn a bit of DSA (Data Structures and Algorithms): do easy in neetcode Note\nProject ideas:\nMake a discord bot with discord.py Program a simple game with PyGame such as Snake Deploy a simple FastAPI website in Deta (maybe a TODO list) Advanced Switch to PyCharm once you are familiar with the syntax and concepts such as virtualenvs, git, etc.\n📚Read: Fluent Python (2022): magic methods, dataclasses, Advanced typing, decorators Architecture Patterns with Python: DDD, CQRS, Event-Driver Architecture, etc. 📺Watch: sort by popular ArjanCodes: Advanced, refactoring videos are great. mCoding: Trivia. 🧰Learn about Design Patterns in python but don\u0026rsquo;t go too crazy. 📝StackOverflow Questions: should know the answers to the most voted questions. Info\nUse venv and pip-tools for dependency management, poetry is also a good option, specially for packaging a library. Avoid pipenv.\n⚡️Concurrency with superfast python: Why Learn Python Concurrency How to Choose the Right Concurrency API 🧪Learn about testing 🔄Task queues: Celery / arq 🔧CI Tools (sample precommit): MyPy, Black, isort, flake8 / ruff, pip-audit, bandit. 👀Checkout some Open Source projects, better if you have used them before: requests and httpx: probably familiar with them arq: small modern project, take a good look at every file Tip\nKeep an eye on:\nLatest Python features: read summaries Reddit: Check top posts by year or month Top libraries: by year Web Frameworks Note\nSee notes about web\nDeploy using https://deta.space/ or https://www.pythonanywhere.com/\nDjango: tutorial readthedocs: documentation hosting sentry: monitoring platform old mdn: kuma, old MDN guya.moe: manga reading website Flask: tutorial SimpleLogin Apache Airflow redash.io sourcehut FastAPI: tutorial TermPair Dispatch Mealie Opal ","permalink":"https://xiang.es/python/","summary":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nBasics Download Python and Visual Studio Code with the Python extension.\nStart with single file scripts.\n📚Introducing Python (2019): Ignore everything after chapter 11 📝Basic OOP 🎨Skim through pep8 ⚡️Learn a bit of DSA (Data Structures and Algorithms): do easy in neetcode Note\nProject ideas:\nMake a discord bot with discord.py Program a simple game with PyGame such as Snake Deploy a simple FastAPI website in Deta (maybe a TODO list) Advanced Switch to PyCharm once you are familiar with the syntax and concepts such as virtualenvs, git, etc.","title":"🐍 Python"},{"content":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nBasics 📚Learn Go with Tests 🌐Tour 📚Effective Go 📚Learning Go 📚Go by Example Advanced 📚Let\u0026rsquo;s Go: Working app with templating, stateful sessions, raw SQL, etc 📚Let\u0026rsquo;s Go Further: Modern JSON REST API ","permalink":"https://xiang.es/go/","summary":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nBasics 📚Learn Go with Tests 🌐Tour 📚Effective Go 📚Learning Go 📚Go by Example Advanced 📚Let\u0026rsquo;s Go: Working app with templating, stateful sessions, raw SQL, etc 📚Let\u0026rsquo;s Go Further: Modern JSON REST API ","title":"🐿️ Go"},{"content":"References and things to learn.\nBackend / Architect: Mark as done as you go.\nGeneral 🌐Refactoring guru: Refactoring patterns and Design Patterns 📚The Pragmatic Programmer: Agnostic book about software engineering 📚Software Engineering at Google: Google\u0026rsquo;s approach to software engineering Interviewing 📝DSA 📝System Design 📝Behavioral Questions Version Control (Git) Resources ✨Cheatsheet 🌐Git Flow / Github Flow 🔨Gitmoji / Conventional Commits 💩Oh Shit, Git!?! Languages Surveys: JetBrains / Stack Overflow\nJobs Language Description 💼 Python best lang 🐍 (not biased) 💼 Go good at networking and concurrency 💼 Rust systems programming 💼 Java enterprise applications 💼 TypeScript large scale web apps Terminal 📝Command Line Crash Course 📚The Linux Command Line Databases SQL ORMs are great, but you should know how to use raw SQL.\n📚Practical SQL 📝w3schools 🥋Lintcode practice NoSQL 📗MongoDB Manual / Little Book 📕Redis Documentation / Little Book [Neo4j] [Cassandra] [Firebase] Containerization 🐋Docker for beginners 🎨Docker Best Practices ☸️Kubernetes Flask Guide Web Development Basics How does the Internet work? What is a web server? What is HTTP? Inspect network activity Advanced Authentication reddit post OAuth vulnerability on Booking Engineering Blogs Airbnb Cloudflare Discord DoorDash Dropbox Linkedin Meta Pinterest Riot Stripe Twitter Uber ","permalink":"https://xiang.es/roadmap/","summary":"\u003cp\u003eReferences and things to learn.\u003c/p\u003e","title":"🗺️ Personal Roadmap"},{"content":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nBasics Web Frameworks Note\nSee notes about web\nActix: tutorial for beginners miniserve mdn: superseeds kuma axum roapi restful template realworld ","permalink":"https://xiang.es/rust/","summary":"⬅️Back to Roadmap\n💼 Jobs / 🥋 Codewards\nBasics Web Frameworks Note\nSee notes about web\nActix: tutorial for beginners miniserve mdn: superseeds kuma axum roapi restful template realworld ","title":"🦀 Rust"},{"content":"Some notes about microservices\nReference Building Microservices Microservices Indendently releasable/deployable services (loosely coupled, stable contracts). Modeled around a business domain (end-to-end slices of business functionality). Implementation details are hidden (owning their own state, no sharing of databases, different technologies/try new things, etc). Tip\nThey allow developers to work independently, reducing delivery contention. (Technology Heterogeneity, Robustness, Scaling, Ease of Deployment, Organizational Alignment, Composability, etc)\nInfo\nThey are not a great idea if the product is brand new or the domain is undergoing significant change. Also, if the team is small, the time spent on deployment and management might not be worth it. (Developer Experience, Deployment Overhead, Cost, Reporting, Monitoring, Security, Testing, Latency, Data Consistency, etc)\nMonoliths A valid default choice, doesn\u0026rsquo;t mean legacy.\nSingle-process monoliths: most common, single process that talks to a database (monolithic Django, Rails, etc). Modular monoliths: single process with separate modules that can be worked on independently (shopify). Distributed monolith: multiple services that must be deployed together (disadvages of distributed systems and single-process monoliths, not enough focus on information hiding and cohesion of business functionality). Microservice Boundary Information Hiding: improve development time by allowing more things to be worked on in parallel, allow each module to be understood in isolation and allow modules to be changed independently. The important thing is to form good boundaries between modules. Cohesion The code that changes together, stays together.\nWe want the functionality grouped in a way that we have to make changes in as few places as possible. Avoiding the need to deploy multiple services at the same time.\nCoupling A structure is stable if cohesion is strong and coupling is low.\nSome coupling is inevitable, but we want to minimize it. A loosely coupled service knows as little as it needs to about the other services. Limiting the number of different types of calls is also important, chatty communication is a sign of tight coupling.\nDomain Coupling: Largely unavoidable, occurs when one microservice needs a functionality that the other provides. If a microservice needs to talk to a lot of other microservices it might be doing too much. Also, remember to send only the absolute minimum amount of data needed. Temporal Coupling: One microservice needs another to do something at the same time (synchronous HTTP call), it isn\u0026rsquo;t inherently bad, but with more microservices it can cause issues if you want to scale. Pass-Through Coupling: one microservice passes data to another microservice because it is needed by some other downstream microservice. There are some ways to improve this: bypass the intermediary, make the intermediary take in data in its contract and delegate the formatting to it or make the intermediary treat the needed data as an opaque blob. Common Coupling: two o more microservices use a common set of data (shared database, shared memory or filesystem), changing the structure of the data can impact multiple services. This can be a big problem if the structure of the common data changes frequently / multiple microservices are reading and writing. Who should be responsible of managing the correct lifecycle of the data, do we make a thin CRUD wrapper and reduce cohesion? Content Coupling: similar to common coupling but there is no clear knowledge about ownership of the data (eg: one microserve makes changes to a database bypassing the actual service that exposes the data). DDD Important concepts for building microservices:\nUbiquitous Language: the same language is used by all the stakeholders (developers, business, etc). Aggregates: a group of objects that are treated as a unit for the purpose of data changes, typically have a life cycle around them / state machine. Bounded Context: organizational boundary, internal concerns should be hidden, make use of hidden models and shared models of associated aggregates. Mapping Aggregates and Bounded Contexts to Microservices: you can always star with a coarser-grained API and split into more microservices if needed (implementation detail). Event Storming: a technique for building a domain model with both technical and nontechnical stakeholders. Alternatives:\nVolatility: extract parts that go through a lot of changes (eg: bimodal IT, Mode 1 and Mode 2), not very recommended. Data: driven by privacy and security concerns, to reduce risk of data breaches and simplify oversight. Technology: this isn\u0026rsquo;t really a general means of decomposition. Organizational: driven by the organizational structure of the company, prefer end-to-end vertical slice instead of a horizontal slice. Splitting the Monolith Microservices are not the goal just a means to an end. Incremental migration, identify quick wins, avoid premature decomposition. Balance difficulty with benefits. Patterns: Strangler Fig: wrap an old system with the new system gradually. Parallel Run: run both and compare. Feature Toggle: feature flags. Data Decomposition: Performance: joins? Integrity: cascading? Transactions: distributed transactions, sagas? Reporting database for external reading. Communication styles TODO\n","permalink":"https://xiang.es/posts/microservices/","summary":"\u003cp\u003eSome notes about microservices\u003c/p\u003e","title":"📝 Microservices notes"},{"content":"Some notes about DDD\nReferences Awesome Domain-Driven Design Cosmic Python Domain-Driven Design Implementing Domain-Driven Design Domain Use @dataclass(frozen=True) for value objects For entities (objects with long lived identity, aka Reference Objects) use a normal class and implement __eq__ and __hash__ Don\u0026rsquo;t use FooBuilder, BarManager classes, just functions Repository Use Protocol instead of abc. Leave .commit() as a responsibility for the caller. For simple cases this abstraction is unnecessary, you can just stick with ORMs. Create an in-memory FakeRepository for testing. Info\nSome people consider \u0026ldquo;monkeypatching\u0026rdquo; a code smell and prefer using Fakes.\nService Pass the repository as a parameter to service-layer functions and use primitives instead of Domain objects. Leave endpoints as a thin wrapper for parsing and returning HTTP responses, but you can combine controller/views if it is just a web app. Write tests for the service layer. Unit of Work Use context manager and initialize the repository on __enter__. Explicit commit is recommended for easier state flushing. Add uow to the service layer. Aggregates and Consistency Boundaries An AGGREGATE is a cluster of associated objects that we treat as a unit for the purpose of data changes.\nConfigure version counters for Optimistic Concurrency Control. Retry on conflict. The only repository that should be used is the one for the aggregate. Part 1: https://github.com/cosmicpython/code/tree/chapter_07_aggregate\nEvents and Message Bus To avoid violating the single responsibility principle, use events instead of commands. A message bus is a dict that maps event types to a list of handlers. Rethink API calls as capturing events. Services will have only 2 params: the event and the uow. Commands If at first you don’t succeed, retry the operation with an exponentially increasing back-off period.\nCommands are usually imperative verbs and expect a response. Events are usually past-tense verbs and broadcasted. Event-Driven Architecture Use an external message broker (redis, kafka, rabbitmq). Two services should accept eventual consistency between them. Avoid the Distributed Big Ball of Mud, think in terms of verbs / business processes with asynchronous communication. https://martinfowler.com/articles/201701-event-driven.html\nCommand-Query Responsibility Separation (CQRS) Create thin views for our data: via raw SQL?? (repository are clunky and ORMs slow). Dependency Injection (DI) Dependency Injection vs Monkeypatching. Part 2: https://github.com/cosmicpython/code\n","permalink":"https://xiang.es/posts/ddd/","summary":"\u003cp\u003eSome notes about DDD\u003c/p\u003e","title":"📝 Domain Driven Design notes"},{"content":"Some notes about design patterns\nInfo\nDo NOT use design patterns just because you can.\nUse them when they make sense, they should emerge naturally from the problem.\nIn some languages, they might be considered anti-patterns.\nReferences https://refactoring.guru/design-patterns/catalog https://www.oreilly.com/library/view/head-first-design/9781492077992/ https://github.com/faif/python-patterns https://www.patterns.dev/posts Behavioral ⭐Strategy Pattern Define a family of algorithms, encapsulate each one, and make them interchangeable.\nEnables algorithm at runtime, hide implementation details, easy to add new strategies.\nExample from typing import Protocol class Order: def __init__( self, price: float, discount_strategy: \u0026#34;DiscountStrategy\u0026#34; = None, ): self.price = price self.discount_strategy = discount_strategy def apply_discount(self) -\u0026gt; float: if self.discount_strategy: discount = self.discount_strategy(self) else: discount = 0 return self.price - discount class DiscountStrategy(Protocol): def __call__(self, order: Order) -\u0026gt; float: ... def ten_percent_discount(order: Order) -\u0026gt; float: return order.price * 0.1 def on_sale_discount(order: Order) -\u0026gt; float: return order.price * 0.25 + 20 if __name__ == \u0026#34;__main__\u0026#34;: order = Order(100, discount_strategy=ten_percent_discount) print(order.apply_discount()) order = Order(100, discount_strategy=on_sale_discount) print(order.apply_discount()) ⭐Observer Pattern Maintains a list of dependents and notifies them of any state changes.\nDjango signals / Flask signals\nExample class Observer(Protocol): def update(self, subject: \u0026#34;Subject\u0026#34;) -\u0026gt; None: ... class Subject: def __init__(self) -\u0026gt; None: self._observers: list[Observer] = [] def attach(self, observer: Observer) -\u0026gt; None: if observer not in self._observers: self._observers.append(observer) def detach(self, observer: Observer) -\u0026gt; None: with suppress(ValueError): self._observers.remove(observer) def notify(self, modifier: Observer | None = None) -\u0026gt; None: for observer in self._observers: if modifier != observer: observer.update(self) class Data(Subject): def __init__(self, name: str = \u0026#34;\u0026#34;) -\u0026gt; None: super().__init__() self.name = name self._data = 0 @property def data(self) -\u0026gt; int: return self._data @data.setter def data(self, value: int) -\u0026gt; None: self._data = value self.notify() class HexViewer: def update(self, subject: Data) -\u0026gt; None: print(f\u0026#34;HexViewer: Subject {subject.name} has data 0x{subject.data:x}\u0026#34;) class DecimalViewer: def update(self, subject: Data) -\u0026gt; None: print(f\u0026#34;DecimalViewer: Subject {subject.name} has data {subject.data}\u0026#34;) if __name__ == \u0026#34;__main__\u0026#34;: data1 = Data(\u0026#34;Data 1\u0026#34;) view1 = DecimalViewer() view2 = HexViewer() data1.attach(view1) data1.attach(view2) data1.data = 10 ⭐Command Pattern Object oriented implementation of callback functions.\nExample from typing import Protocol class HideFileCommand: def __init__(self) -\u0026gt; None: self._hidden_files: list[str] = [] def execute(self, filename: str) -\u0026gt; None: print(f\u0026#34;hiding {filename}\u0026#34;) self._hidden_files.append(filename) def undo(self) -\u0026gt; None: filename = self._hidden_files.pop() print(f\u0026#34;un-hiding {filename}\u0026#34;) class DeleteFileCommand: def __init__(self) -\u0026gt; None: self._deleted_files: list[str] = [] def execute(self, filename: str) -\u0026gt; None: print(f\u0026#34;deleting {filename}\u0026#34;) self._deleted_files.append(filename) def undo(self) -\u0026gt; None: filename = self._deleted_files.pop() print(f\u0026#34;restoring {filename}\u0026#34;) class Command(Protocol): def execute(self, filename: str) -\u0026gt; None: ... def undo(self) -\u0026gt; None: ... class MenuItem: def __init__(self, command: Command) -\u0026gt; None: self._command = command def on_do_press(self, filename: str) -\u0026gt; None: self._command.execute(filename) def on_undo_press(self) -\u0026gt; None: self._command.undo() if __name__ == \u0026#34;__main__\u0026#34;: item1 = MenuItem(DeleteFileCommand()) item2 = MenuItem(HideFileCommand()) test_file_name = \u0026#34;test-file\u0026#34; item1.on_do_press(test_file_name) item1.on_undo_press() item2.on_do_press(test_file_name) item2.on_undo_press() ⭐Iterator Pattern Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.\nExample def count_to(count: int): \u0026#34;\u0026#34;\u0026#34;Counts by word numbers, up to a maximum of five\u0026#34;\u0026#34;\u0026#34; numbers = [\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;, \u0026#34;three\u0026#34;, \u0026#34;four\u0026#34;, \u0026#34;five\u0026#34;] yield from numbers[:count] def count_to_five() -\u0026gt; None: return count_to(5) for number in count_to_five(): print(number) Template Method Pattern Skeleton of a base algorithm, definition of exact steps in subclasses.\nDjango Class Based Views\nExample def template_function(getter, converter=None, to_save=False) -\u0026gt; None: data = getter() print(f\u0026#34;Got `{data}`\u0026#34;) if len(data) \u0026lt;= 3 and converter: data = converter(data) else: print(\u0026#34;Skip conversion\u0026#34;) if to_save: saver() print(f\u0026#34;`{data}` was processed\u0026#34;) State Pattern Lets an object alter its behavior when its internal state changes.\nExample class State: def scan(self) -\u0026gt; None: self.pos += 1 if self.pos == len(self.stations): self.pos = 0 print(f\u0026#34;Scanning... Station is {self.stations[self.pos]} {self.name}\u0026#34;) class AmState(State): def __init__(self, radio: Radio) -\u0026gt; None: self.radio = radio self.stations = [\u0026#34;1250\u0026#34;, \u0026#34;1380\u0026#34;, \u0026#34;1510\u0026#34;] self.pos = 0 self.name = \u0026#34;AM\u0026#34; def toggle_amfm(self) -\u0026gt; None: print(\u0026#34;Switching to FM\u0026#34;) self.radio.state = self.radio.fmstate class FmState(State): def __init__(self, radio: Radio) -\u0026gt; None: self.radio = radio self.stations = [\u0026#34;81.3\u0026#34;, \u0026#34;89.1\u0026#34;, \u0026#34;103.9\u0026#34;] self.pos = 0 self.name = \u0026#34;FM\u0026#34; def toggle_amfm(self) -\u0026gt; None: print(\u0026#34;Switching to AM\u0026#34;) self.radio.state = self.radio.amstate class Radio: def __init__(self) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;We have an AM state and an FM state\u0026#34;\u0026#34;\u0026#34; self.amstate = AmState(self) self.fmstate = FmState(self) self.state = self.amstate def toggle_amfm(self) -\u0026gt; None: self.state.toggle_amfm() def scan(self) -\u0026gt; None: self.state.scan() Chain of Responsibility Pattern Allow a request to pass down a chain of receivers until it is handled. Faif Mediator Pattern Encapsulates how a set of objects interact. Faif Memento Pattern Provides the ability to restore an object to its previous state. Faif Visitor Pattern Separates an algorithm from an object structure on which it operates. Faif Structural ⭐Adapter Pattern Allows the interface of an existing class to be used as another interface.\nExample T = TypeVar(\u0026#34;T\u0026#34;) class Adapter: def __init__(self, obj: T, **adapted_methods: Callable): \u0026#34;\u0026#34;\u0026#34;We set the adapted methods in the object\u0026#39;s dict.\u0026#34;\u0026#34;\u0026#34; self.obj = obj self.__dict__.update(adapted_methods) def __getattr__(self, attr): \u0026#34;\u0026#34;\u0026#34;All non-adapted calls are passed to the object.\u0026#34;\u0026#34;\u0026#34; return getattr(self.obj, attr) def original_dict(self): \u0026#34;\u0026#34;\u0026#34;Print original object dict.\u0026#34;\u0026#34;\u0026#34; return self.obj.__dict__ cat = Cat() objects.append(Adapter(cat, make_noise=cat.meow)) human = Human() objects.append(Adapter(human, make_noise=human.speak)) car = Car() objects.append(Adapter(car, make_noise=lambda: car.make_noise(3))) for obj in objects: print(\u0026#34;A {0} goes {1}\u0026#34;.format(obj.name, obj.make_noise())) ⭐Model-View-Controller Pattern Separates data in GUIs from the ways it is presented, and accepted. Decorator Pattern Adds behaviour to object without affecting its class. Faif Facade Pattern Provides a simpler unified interface to a complex system. Faif Composite Pattern Describes a group of objects that is treated as a single instance. Faif Proxy Pattern Add functionality or logic to a resource without changing its interface. Faif Bridge Pattern Decouples an abstraction from its implementation. Faif Flyweight Pattern Minimizes memory usage by sharing data with other similar objects. Faif Creational ⭐Factory Pattern Object for creating other objects without having to specify the exact class.\nDjango formset_factory\nExample class GreekLocalizer: def __init__(self) -\u0026gt; None: self.translations = {\u0026#34;dog\u0026#34;: \u0026#34;σκύλος\u0026#34;, \u0026#34;cat\u0026#34;: \u0026#34;γάτα\u0026#34;} def localize(self, msg: str) -\u0026gt; str: return self.translations.get(msg, msg) class EnglishLocalizer: def localize(self, msg: str) -\u0026gt; str: return msg def get_localizer(language: str = \u0026#34;English\u0026#34;) -\u0026gt; object: localizers = { \u0026#34;English\u0026#34;: EnglishLocalizer, \u0026#34;Greek\u0026#34;: GreekLocalizer, } return localizers[language]() e, g = get_localizer(language=\u0026#34;English\u0026#34;), get_localizer(language=\u0026#34;Greek\u0026#34;) for msg in [\u0026#34;dog\u0026#34;, \u0026#34;parrot\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;bear\u0026#34;]: print(e.localize(msg), g.localize(msg)) ⭐Abstract Factory Pattern Provides a way to encapsulate a group of individual factories.\nExample class PetShop: \u0026#34;\u0026#34;\u0026#34;A pet shop\u0026#34;\u0026#34;\u0026#34; def __init__(self, animal_factory: Type[Pet]) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34;pet_factory is our abstract factory. We can set it at will.\u0026#34;\u0026#34;\u0026#34; self.pet_factory = animal_factory def buy_pet(self, name: str) -\u0026gt; Pet: \u0026#34;\u0026#34;\u0026#34;Creates and shows a pet using the abstract factory\u0026#34;\u0026#34;\u0026#34; pet = self.pet_factory(name) print(f\u0026#34;Here is your lovely {pet}\u0026#34;) return pet # Create a random animal def random_animal(name: str) -\u0026gt; Pet: \u0026#34;\u0026#34;\u0026#34;Let\u0026#39;s be dynamic!\u0026#34;\u0026#34;\u0026#34; return random.choice([Dog, Cat])(name) cat_shop = PetShop(Cat) pet = cat_shop.buy_pet(\u0026#34;Lucy\u0026#34;) shop = PetShop(random_animal) pet = shop.buy_pet(\u0026#34;Max\u0026#34;) ⭐Builder Pattern Decouples the creation of a complex object and its representation.\nExample class Building: def __init__(self) -\u0026gt; None: self.build_floor() self.build_size() def build_floor(self): raise NotImplementedError def build_size(self): raise NotImplementedError # Concrete Buildings class House(Building): def build_floor(self) -\u0026gt; None: self.floor = \u0026#34;One\u0026#34; def build_size(self) -\u0026gt; None: self.size = \u0026#34;Big\u0026#34; class Flat(Building): def build_floor(self) -\u0026gt; None: self.floor = \u0026#34;More than One\u0026#34; def build_size(self) -\u0026gt; None: self.size = \u0026#34;Small\u0026#34; Singleton Pattern Ensure a class only has one instance, and provide a global point of access to it. In python modules are only imported once. Just declare a variable there. Faif Prototype Pattern Creates new object instances by cloning prototype. Faif ","permalink":"https://xiang.es/posts/patterns/","summary":"\u003cp\u003eSome notes about design patterns\u003c/p\u003e","title":"📝 Design Patterns notes"},{"content":"Overview of the CP-SAT solver from Google OR-Tools\nReferences: Laurent Perron and Frédéric Didier, CPAIOR 2020: https://youtu.be/lmy1ddn4cyw Peter J. Stuckey, Search is Dead: https://people.eng.unimelb.edu.au/pstuckey/PPDP2013.pdf Dominik Krupke, CP-SAT primer: https://github.com/d-krupke/cpsat-primer Model Building The first step is building the model using the CPModel class. This class is actually a wrapper around the cp_model protobuf.\nLet\u0026rsquo;s see an example (source):\nfrom ortools.sat.python import cp_model \u0026#34;\u0026#34;\u0026#34;Minimal CP-SAT example to showcase calling the solver.\u0026#34;\u0026#34;\u0026#34; # Creates the model. # [START model] model = cp_model.CpModel() # [END model] # Creates the variables. # [START variables] num_vals = 3 x = model.NewIntVar(0, num_vals - 1, \u0026#39;x\u0026#39;) y = model.NewIntVar(0, num_vals - 1, \u0026#39;y\u0026#39;) z = model.NewIntVar(0, num_vals - 1, \u0026#39;z\u0026#39;) # [END variables] # Creates the constraints. # [START constraints] model.Add(x != y) # [END constraints] # Creates a solver and solves the model. # [START solve] solver = cp_model.CpSolver() status = solver.Solve(model) # [END solve] if status == cp_model.FEASIBLE: print(\u0026#39;x = %i\u0026#39; % solver.Value(x)) print(\u0026#39;y = %i\u0026#39; % solver.Value(y)) print(\u0026#39;z = %i\u0026#39; % solver.Value(z)) This model creates the following proto print(str(model)):\nvariables { name: \u0026#34;x\u0026#34; domain: 0 domain: 2 } variables { name: \u0026#34;y\u0026#34; domain: 0 domain: 2 } variables { name: \u0026#34;z\u0026#34; domain: 0 domain: 2 } constraints { linear { vars: 1 vars: 0 coeffs: -1 coeffs: 1 domain: -9223372036854775808 domain: -1 domain: 1 domain: 9223372036854775807 } } Note: int64 is [-9223372036854775808, 9223372036854775807]\nPresolve Loop First stage: We will process all active constraints until a fix point is reached. During this stage:\nVariable will never be deleted, but their domain will be reduced. Constraint will never be deleted (they will be marked as empty if needed). New variables and new constraints can be added after the existing ones. Constraints are added only when needed to the mapping_problem if they are needed during the postsolve. Second stage:\nAll the variables domain will be copied to the mapping_model. Everything will be remapped so that only the variables appearing in some constraints will be kept and their index will be in [0, num_new_variables). - source Presolve: Domain reduction, constraint simplification/rewrite Constraint expansion/decomposition: Similar to Minizinc -\u0026gt; Flatzinc (element constraint, table, automaton, inverse, product, modulo, reservoir) Detect variable equivalence and affine relations. Substitute by canonical representation. Probing: Fix variables and see what is propagated. This produces 2 new models, the inner model that will be solved and a channeling model used to populate the solution of the initial model. - source\nSolver The CP-SAT solver uses a lazy clause generation solver on top of an SAT solver. The best description is a presentation from Peter Stuckey called Search is Dead - Laurent Perron\nIn Lazy clause generation (LCG), integer variables are encoded as booleans, ortools creates 2 booleans for each variable and value:\nvar == value var \u0026lt;= value Note: var \u0026gt;= value (represented as ![x \u0026lt;= value-1])\n(var == value) \u0026lt;=\u0026gt; (var \u0026gt;= value) and (var \u0026lt;= value) (var \u0026lt;= value) =\u0026gt; (var \u0026lt;= value+1) Propagation is clause generation:\ne.g. [x \u0026lt;= 2] and x \u0026gt;= y means that [y \u0026lt;= 2] clause [x \u0026lt;= 2] =\u0026gt; [y \u0026lt;= 2] Linear relaxation TODO\nDefault search (single thread) VSIDS on the Boolean problem, when it reaches a fixed point, it asks the heuristic to select an integer variable, a value and a braching direction.\nMultithreading The solver uses the first X threads to generic methods, and use all the remaining ones on LNS (Large Neighborhood Search). -Laurent Perron\n","permalink":"https://xiang.es/posts/explaining-cp-sat/","summary":"\u003cp\u003eOverview of the CP-SAT solver from Google OR-Tools\u003c/p\u003e","title":"🎓 How the CP-SAT solver works"},{"content":"How I set up this website using GitHub Pages, namecheap and Cloudflare\nWarning\nI have migrated my website to Hugo PaperMod + hugo notice\nRead the Papermod Guide and how to host on Github for more info.\nGitHub Pages GitHub Pages is a free and easy way to host a static website. It also works with jekyll, making creating a personal blog very easy.\nSelecting a theme There are a lot of different themes that you can choose from on GitHub.\nIn my case I pretty much chose the first one: Minimal Mistakes and used the starter from its guide.\nAfter setting myusername.github.io as the repository name and enabling github pages in the settings, the website was up and running.\nCustom Domain I wanted to use a custom domain name for my site, so I went to namecheap and purchased xiang.dev given that Google released this domain quite recently.\nI used Cloudflare to handle the redirect and SSL certificates for the site, it is completely free and quite easy to use.\nThis guide by Bart de Goede is quite detailed and explains this step quite well.\nYou may also need to set up A records on Cloudflare pointing to the IPs owned by GitHub.\nNote: Don\u0026rsquo;t forget to also change the nameservers of your domain to the ones provided by cloudflare.\n","permalink":"https://xiang.es/posts/website-setup/","summary":"\u003cp\u003eHow I set up this website using GitHub Pages, namecheap and Cloudflare\u003c/p\u003e","title":"🔧 Website Setup"},{"content":"Software engineer at Paradigma Digital.\nAvid gamer, reader and weeb.\nLanguages: 🇪🇸, 🇨🇳, 🇬🇧 and learning 🇯🇵\nExperience Date Position Company 09/2021 - Present Software Engineer 04/2021 - 09/2021 Software Engineer 09/2018 - 01/2021 Full Stack Engineer 09/2017 - 12/2017 Web Development Intern Education Title Organization Master in Computer Science (In Progress) Degree in Mathematics and Computer Science Other Fandom Wiki admin: Hollow Knight (ES) Blasphemous (ES) Contributor: Google OR-Tools: Open Source Peer Bonus winner ","permalink":"https://xiang.es/about/","summary":"Software engineer at Paradigma Digital.\nAvid gamer, reader and weeb.\nLanguages: 🇪🇸, 🇨🇳, 🇬🇧 and learning 🇯🇵\nExperience Date Position Company 09/2021 - Present Software Engineer 04/2021 - 09/2021 Software Engineer 09/2018 - 01/2021 Full Stack Engineer 09/2017 - 12/2017 Web Development Intern Education Title Organization Master in Computer Science (In Progress) Degree in Mathematics and Computer Science Other Fandom Wiki admin: Hollow Knight (ES) Blasphemous (ES) Contributor: Google OR-Tools: Open Source Peer Bonus winner ","title":"About me"},{"content":"Here are some of my personal projects.\nGithub Google OR-Tools contibutions: Some contributions to the Google OR-Tools project. Awesome OR: A curated list of awesome Operations Research resources. Python Web Frameworks stars Hollow Knight Hollow Knight Wikia Loved that game and decided to translate the english wikia into spanish. Hollow Knight Translator Tool to search of in-game translations.\nFinal Degree Project (University) Generating quality 2D polygon meshes using Restricted Delaunay Triangulations.\nOther Acknowledged: Towards Explainability of On-board Satellite Scheduling for End User Interactions ","permalink":"https://xiang.es/projects/","summary":"Here are some of my personal projects.\nGithub Google OR-Tools contibutions: Some contributions to the Google OR-Tools project. Awesome OR: A curated list of awesome Operations Research resources. Python Web Frameworks stars Hollow Knight Hollow Knight Wikia Loved that game and decided to translate the english wikia into spanish. Hollow Knight Translator Tool to search of in-game translations.\nFinal Degree Project (University) Generating quality 2D polygon meshes using Restricted Delaunay Triangulations.","title":"Projects"}]